name: 'Addon-HyperHDR'

# Controls when the action will run
on: [ workflow_dispatch ]

jobs:
  init:
    runs-on: ubuntu-latest
    name: Initialize builds
    outputs:
      addons: ${{ steps.convert.outputs.addons }} # Output the add-ons found
    steps:
      # Check out the repository
      - name: Check out the repository
        uses: actions/checkout@v3
        
      # Set up Node.js
      - name: Setup NodeJS
        uses: actions/setup-node@v3
        
      # Sync version to source
      - name: Sync HyperHDR
        run: ./.github/scripts/update-hyperhdr-version.sh
        
      # Find add-ons in repository
      - name: Find add-on directories
        id: addons
        uses: home-assistant/actions/helpers/find-addons@master
        
      # Prepare matrix addons
      - name: Convert addons to array
        id: convert
        run: |
          # Initialize an empty array
          addons=()
      
          # Convert the string to an array
          IFS=' ' read -r -a array <<< "${{ steps.addons.outputs.addons }}"
      
          # Append each addon to the array
          for addon in "${array[@]}"; do
            addons+=("\"${addon}\"")
          done
      
          # Join the array into a JSON array string
          json_addons=$(printf '%s,' "${addons[@]}" | sed 's/,$//')
      
          # Output the JSON array
          echo "::set-output name=addons::[${json_addons}]"
        shell: bash
  build:
    needs: init
    runs-on: ubuntu-latest
    name: Build ${{ matrix.arch }} ${{ matrix.addon }} add-on
    strategy:
      matrix:
        addon: ${{ fromJson(needs.init.outputs.addons) }}
        arch: ["aarch64", "amd64", "armhf", "armv7"]
    steps:
  
      # Check out the repository
      - name: Check out repository
        uses: actions/checkout@v3
        
      - name: Get information
        id: info
        uses: home-assistant/actions/helpers/info@master
        with:
          path: "./${{ matrix.addon }}"

      - name: Check if add-on should be built
        id: check
        run: |
          if [[ "${{ steps.info.outputs.architectures }}" =~ ${{ matrix.arch }} ]]; then
             echo "::set-output name=build_arch::true";
             echo "::set-output name=image::$(echo ${{ steps.info.outputs.image }} | cut -d'/' -f3)";
             if [[ -z "${{ github.head_ref }}" ]] && [[ "${{ github.event_name }}" == "push" ]]; then
                 echo "BUILD_ARGS=" >> $GITHUB_ENV;
             fi
           else
             echo "${{ matrix.arch }} is not a valid arch for ${{ matrix.addon }}, skipping build";
             echo "::set-output name=build_arch::false";
          fi
      
      # Log in to GitHub Container Registry (GHCR)
      - name: Log in to GitHub Container Registry
        if: env.BUILD_ARGS != '--test'
        uses: docker/login-action@v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build ${{ matrix.addon }} add-on
        if: steps.check.outputs.build_arch == 'true'
        uses: home-assistant/builder@2022.11.0
        with:
          args: |
            ${{ env.BUILD_ARGS }} \
            --${{ matrix.arch }} \
            --target /data/${{ matrix.addon }} \
            --image "${{ steps.check.outputs.image }}" \
            --docker-hub "ghcr.io/${{ github.repository_owner }}" \
            --addon

      # Update version if needed
      - uses: test-room-7/action-update-file@v1
        if: ${{ env.VERSION != env.RELEASE }}
        with:
          file-path: addon-hyperhdr/config.json
          commit-msg: Update version
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # Create a GitHub release
      - uses: actions/create-release@v1
        if: ${{ env.VERSION != env.RELEASE }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE }}
          release_name: ${{ env.RELEASE }}
          draft: false
          prerelease: false
